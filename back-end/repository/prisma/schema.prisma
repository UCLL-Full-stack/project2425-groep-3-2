generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  name      String
  email     String         @unique
  password  String
  role      UserRole       
  wallet    Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  chores    ChoreAssignment[]
  rewards   UserReward[]
  notifications Notification[]
}

model Chore {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  points      Int
  createdAt   DateTime @default(now())
  assignedTo  ChoreAssignment[]
  notifications Notification[]
}

model ChoreAssignment {
  id        Int      @id @default(autoincrement())
  userId    Int
  choreId   Int
  status    ChoreStatus
  assignedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  chore Chore @relation(fields: [choreId], references: [id])

  @@unique([userId, choreId])
}

model Reward {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       UserReward[]
  notifications Notification[]
}

model UserReward {
  id        Int      @id @default(autoincrement())
  userId    Int
  rewardId  Int
  redeemedAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id])
  reward  Reward @relation(fields: [rewardId], references: [id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  choreId     Int?      
  rewardId    Int?      
  message     String    
  type        NotificationType    
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  extraData  String?

  user        User      @relation(fields: [userId], references: [id])
  chore       Chore?    @relation(fields: [choreId], references: [id])
  reward      Reward?   @relation(fields: [rewardId], references: [id])

  @@index([userId])
  @@index([choreId])
  @@index([rewardId])
}

enum UserRole {
  admin
  child
  parent
}

enum ChoreStatus {
  pending
  completed
  incomplete
}

enum NotificationType {
  CHORE_ASSIGNMENT
  REWARD_REDEMPTION
  REWARD_USAGE
}
